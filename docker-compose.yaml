version: "3"
services:
  redis-master:
    container_name: redis-master
    logging:
      driver: none
    expose:
      - 6379
    build:
      context: ./redis/master
      args:
        REDIS_MASTER_PASS: ${REDIS_MASTER_PASS}
  # redis-readonly:
  #   container_name: redis-readonly
  #   expose:
  #     - 6379
  #   build:
  #     context: ./redis/readonly
  #     args:
  #       REDIS_MASTER_HOST: redis-master
  #       REDIS_MASTER_PASS: ${REDIS_MASTER_PASS}
  # redis-commander:
  #   container_name: redis-commander
  #   hostname: redis-commander
  #   image: rediscommander/redis-commander:latest
  #   restart: always
  #   environment:
  #     - VIEW_JSON_DEFAULT=all
  #     - REDIS_HOSTS=local:redis-master:6379:0:${REDIS_MASTER_PASS},local:redis-readonly:6379
  #   ports:
  #     - 8081:8081
  backend:
    container_name: backend
    depends_on:
      - redis-master
    restart: always
    build:
      context: ./
      dockerfile: ./backend/Dockerfile
    environment:
      - REDIS_URL=${REDIS_URL}
      - BOT_TOKEN=${BOT_TOKEN}
      - INTERNAL_BACKEND_WS_PORT=${INTERNAL_BACKEND_WS_PORT}
      - DOMAIN=${DOMAIN}
      - FRONTEND_HOST=${FRONTEND_HOST}
      - FRONTEND_PORT=${FRONTEND_PORT}
    expose:
      - ${INTERNAL_BACKEND_WS_PORT}
  client:
    container_name: client
    restart: always
    depends_on:
      - backend
    build:
      context: ./
      dockerfile: ./client/Dockerfile
      args:
        INTERNAL_BACKEND_WS_PORT: ${INTERNAL_BACKEND_WS_PORT}
        DOMAIN: ${DOMAIN}
    environment:
      - FRONTEND_HOST=${FRONTEND_HOST}
      - FRONTEND_PORT=${FRONTEND_PORT}
    ports:
      - 80:80
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
  certbot:
    container_name: certbot
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
